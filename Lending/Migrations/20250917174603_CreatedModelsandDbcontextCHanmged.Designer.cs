// <auto-generated />
using System;
using Lending.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lending.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250917174603_CreatedModelsandDbcontextCHanmged")]
    partial class CreatedModelsandDbcontextCHanmged
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Lending.Models.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<int?>("LoanApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("DocumentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LoanApplicationId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Lending.Models.LoanApplication", b =>
                {
                    b.Property<int>("LoanApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoanApplicationId"));

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("AppliedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentUrls")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("LoanOfficerId")
                        .HasColumnType("int");

                    b.Property<int?>("LoanSchemeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TenureMonths")
                        .HasColumnType("int");

                    b.HasKey("LoanApplicationId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LoanOfficerId");

                    b.HasIndex("LoanSchemeId");

                    b.ToTable("LoanApplications");
                });

            modelBuilder.Entity("Lending.Models.LoanScheme", b =>
                {
                    b.Property<int>("LoanSchemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoanSchemeId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LoanSchemeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("MaximumAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MaximumTenureMonths")
                        .HasColumnType("int");

                    b.Property<decimal>("MinimumAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("LoanSchemeId");

                    b.ToTable("LoanSchemes");
                });

            modelBuilder.Entity("Lending.Models.Repayment", b =>
                {
                    b.Property<int>("RepaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RepaymentId"));

                    b.Property<decimal>("AmountDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LoanApplicationId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("RepaymentId");

                    b.HasIndex("LoanApplicationId");

                    b.ToTable("Repayments");
                });

            modelBuilder.Entity("Lending.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UserPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Lending.Models.Customer", b =>
                {
                    b.HasBaseType("Lending.Models.User");

                    b.Property<string>("AadhaarNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<decimal?>("AnnualIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CustomerCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerIFSC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PanNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("Lending.Models.LoanAdmin", b =>
                {
                    b.HasBaseType("Lending.Models.User");

                    b.Property<string>("AdminDepartment")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.ToTable("LoanAdmins", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Address = "Head Office",
                            CreatedAt = new DateTime(2025, 9, 17, 17, 46, 3, 7, DateTimeKind.Utc).AddTicks(691),
                            IsActive = true,
                            PasswordHash = "$2a$11$o5DuoMAzo.oL7fTkv6zLBuSdRYqS60iN1VP6lfMHNXstsNp6aHJmO",
                            Role = 0,
                            UserEmail = "admin@lending.com",
                            UserName = "Default Admin",
                            UserPhone = "123-456-7890",
                            AdminDepartment = "Finance",
                            AdminId = 0
                        });
                });

            modelBuilder.Entity("Lending.Models.LoanOfficer", b =>
                {
                    b.HasBaseType("Lending.Models.User");

                    b.Property<int>("CurrentAssignments")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LoanOfficerBranch")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LoanOfficerCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("LoanOfficerId")
                        .HasColumnType("int");

                    b.ToTable("LoanOfficers", (string)null);
                });

            modelBuilder.Entity("Lending.Models.Document", b =>
                {
                    b.HasOne("Lending.Models.Customer", "Customer")
                        .WithMany("Documents")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lending.Models.LoanApplication", "LoanApplication")
                        .WithMany("Documents")
                        .HasForeignKey("LoanApplicationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");

                    b.Navigation("LoanApplication");
                });

            modelBuilder.Entity("Lending.Models.LoanApplication", b =>
                {
                    b.HasOne("Lending.Models.Customer", "Customer")
                        .WithMany("LoanApplications")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lending.Models.LoanOfficer", "LoanOfficer")
                        .WithMany()
                        .HasForeignKey("LoanOfficerId");

                    b.HasOne("Lending.Models.LoanScheme", "LoanScheme")
                        .WithMany("LoanApplications")
                        .HasForeignKey("LoanSchemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("LoanOfficer");

                    b.Navigation("LoanScheme");
                });

            modelBuilder.Entity("Lending.Models.Repayment", b =>
                {
                    b.HasOne("Lending.Models.LoanApplication", "LoanApplication")
                        .WithMany("Repayments")
                        .HasForeignKey("LoanApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanApplication");
                });

            modelBuilder.Entity("Lending.Models.Customer", b =>
                {
                    b.HasOne("Lending.Models.User", null)
                        .WithOne()
                        .HasForeignKey("Lending.Models.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lending.Models.LoanAdmin", b =>
                {
                    b.HasOne("Lending.Models.User", null)
                        .WithOne()
                        .HasForeignKey("Lending.Models.LoanAdmin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lending.Models.LoanOfficer", b =>
                {
                    b.HasOne("Lending.Models.User", null)
                        .WithOne()
                        .HasForeignKey("Lending.Models.LoanOfficer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lending.Models.LoanApplication", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Repayments");
                });

            modelBuilder.Entity("Lending.Models.LoanScheme", b =>
                {
                    b.Navigation("LoanApplications");
                });

            modelBuilder.Entity("Lending.Models.Customer", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("LoanApplications");
                });
#pragma warning restore 612, 618
        }
    }
}
